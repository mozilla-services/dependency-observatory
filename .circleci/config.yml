# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#
version: 2.1
jobs:        
  build-images:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: write a version.json in depobs/
          command: |
            # create a version.json per https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > depobs/version.json
      - run:
          name: docker-compose build
          command: docker-compose build
      - run:
          name: save built image to cache
          command: docker save "${DOCKERHUB_REPO}:latest" | gzip -c > /tmp/docker.tgz
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/docker.tgz

  tests:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: run black formatter in api container
          command: |
            docker run mozilla/dependency-observatory black --check /app/ --diff

  deploy:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: gunzip -c /tmp/docker.tgz | docker load
      - run:
          name: deploy to Dockerhub
          command: |
            # deploy master
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              docker-compose push api
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
              # deploy a release tag
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag "${DOCKERHUB_REPO}:latest" "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  check-readme-local-dev:
    jobs:

      - build-images:
          filters:
            tags:
              only: /.*/

      - tests:
          requires:
            - build-images
          filters:
            tags:
              only: /.*/

      - deploy:
          requires:
            - tests
            - build-images
          filters:
            tags:
              # only upload the docker container on semver tags
              only: /[0-9]\.[0-9]+\.[0-9]+/
            branches:
              only: master
